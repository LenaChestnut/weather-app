{"version":3,"sources":["components/Form.js","components/WeatherCard.js","components/LoadingScreen.js","components/ErrorMessage.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","formInput","width","Form","props","useState","location","setLocation","options","setOptions","useEffect","errorThrown","inputStr","match","join","toLowerCase","shortenedData","data","filter","option","name","country","startsWith","slice","classes","onSubmit","e","preventDefault","getWeatherData","Autocomplete","autoHighlight","getOptionLabel","getOptionSelected","onSelect","target","value","handleChange","className","renderInput","params","TextField","variant","label","placeholder","id","WeatherCard","sys","tempK","main","temp","weather","description","tempDisplayed","setTempDisplayed","tempSystem","setTempSystem","Math","round","charAt","toUpperCase","type","onChange","checked","LoadingScreen","ErrorMessage","App","apiKey","weatherData","setWeatherData","setErrorThrown","backgroundUrl","setBackgroundUrl","isLoading","setIsLoading","getBackgroundImage","keyword","a","fetch","mode","response","ok","bgUrl","url","console","log","json","bg","Error","document","getElementById","style","backgroundImage","Boolean","window","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.51666f47.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport data from '../data/city.list.json';\r\n\r\nconst useStyles = makeStyles({\r\n\tformInput: {\r\n\t\twidth: '100%',\r\n\t},\r\n});\r\n\r\nfunction Form(props) {\r\n\tconst [location, setLocation] = useState('');\r\n\tconst [options, setOptions] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetLocation('');\r\n\t}, [props.errorThrown]);\r\n\r\n\tconst handleChange = (e) => {\r\n\t\tlet name = e.target.value;\r\n\t\tsetLocation(name);\r\n\t};\r\n\r\n\tconst filterOptions = () => {\r\n\t\tsetOptions([]);\r\n\r\n\t\tconst inputStr = location\r\n\t\t\t.match(/[\\wа-яА-Я]*/g)\r\n\t\t\t.join('')\r\n\t\t\t.toLowerCase();\r\n\r\n\t\tif (location !== '') {\r\n\t\t\tconst filteredData = data.filter((option) => {\r\n\t\t\t\tconst optionStr = `${option.name}${option.country}`\r\n\t\t\t\t\t.match(/[\\wа-яА-Я]*/g)\r\n\t\t\t\t\t.join('')\r\n\t\t\t\t\t.toLowerCase();\r\n\t\t\t\tif (optionStr.startsWith(inputStr)) {\r\n\t\t\t\t\treturn option;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t});\r\n\t\t\tconst shortenedData = filteredData.slice(0, 5);\r\n\t\t\tsetOptions(shortenedData);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(filterOptions, [location]);\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tprops.getWeatherData(location);\r\n\t};\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<form name=\"search\" onSubmit={handleSubmit}>\r\n\t\t\t<Autocomplete\r\n\t\t\t\tautoHighlight\r\n\t\t\t\toptions={options}\r\n\t\t\t\tgetOptionLabel={(option) => `${option.name}, ${option.country}`}\r\n\t\t\t\tgetOptionSelected={(option) => option === options[0]}\r\n\t\t\t\tonSelect={(e) => handleChange(e)}\r\n\t\t\t\tclassName={classes.formInput}\r\n\t\t\t\trenderInput={(params) => (\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t{...params}\r\n\t\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\t\tlabel=\"Search\"\r\n\t\t\t\t\t\tplaceholder=\"London, UK\"\r\n\t\t\t\t\t\tvalue={location}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t/>\r\n\t\t\t<button id=\"submit\">Go</button>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nForm.propTypes = {\r\n\tgetWeatherData: PropTypes.func,\r\n\tapiKey: PropTypes.string,\r\n\terrorThrown: PropTypes.bool,\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction WeatherCard(props) {\r\n\tconst {\r\n\t\tname,\r\n\t\tsys: { country },\r\n\t\tmain: { temp: tempK },\r\n\t\tweather: [{ description: weather }],\r\n\t} = props.data;\r\n\tconst [tempDisplayed, setTempDisplayed] = useState('');\r\n\tconst [tempSystem, setTempSystem] = useState('C');\r\n\r\n\tconst convertTemperature = () => {\r\n\t\tif (tempSystem === 'C') {\r\n\t\t\tsetTempDisplayed(Math.round(tempK - 273.15));\r\n\t\t} else {\r\n\t\t\tsetTempDisplayed(Math.round((tempK - 273.15) * 1.8 + 32));\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(convertTemperature, [tempSystem]);\r\n\r\n\tconst handleChange = (e) => {\r\n\t\tif (e.target.checked) {\r\n\t\t\tsetTempSystem('F');\r\n\t\t} else {\r\n\t\t\tsetTempSystem('C');\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"weather-card\">\r\n\t\t\t<h2 className=\"location\">\r\n\t\t\t\t{name}, {country}\r\n\t\t\t</h2>\r\n\t\t\t<div>\r\n\t\t\t\t<p className=\"weather\">\r\n\t\t\t\t\t{weather.charAt(0).toUpperCase() + weather.slice(1)}\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"temp\">\r\n\t\t\t\t\t{tempDisplayed}\r\n\t\t\t\t\t&#176;\r\n\t\t\t\t\t{tempSystem === 'C' ? 'C' : 'F'}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<label className=\"switch\">\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\tid=\"switch-input\"\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t></input>\r\n\t\t\t\t<span className=\"toggle\"></span>\r\n\t\t\t</label>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nWeatherCard.propTypes = {\r\n\tdata: PropTypes.object,\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from 'react';\r\n\r\nfunction LoadingScreen() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"loader\"></div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default LoadingScreen;\r\n","import React from 'react';\r\n\r\nfunction ErrorMessage() {\r\n\treturn (\r\n\t\t<div className=\"error-screen\">\r\n\t\t\t<h1>🌧 404</h1>\r\n\t\t\t<p>Sorry, we couldn&apos;t find anything</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import React, { useState, useEffect } from 'react';\nimport Form from './components/Form';\nimport './App.css';\nimport WeatherCard from './components/WeatherCard';\nimport LoadingScreen from './components/LoadingScreen';\nimport ErrorMessage from './components/ErrorMessage';\n\nfunction App() {\n\tconst [apiKey] = useState('322163d169cf09cdd079a313e33c1a3a');\n\tconst [weatherData, setWeatherData] = useState(null);\n\tconst [errorThrown, setErrorThrown] = useState(false);\n\tconst [backgroundUrl, setBackgroundUrl] = useState(null);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst getBackgroundImage = async (keyword) => {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t`https://source.unsplash.com/featured/?sky,${keyword}`,\n\t\t\t\t{ mode: 'cors' }\n\t\t\t);\n\t\t\tif (response.ok) {\n\t\t\t\tconst bgUrl = response.url;\n\t\t\t\treturn bgUrl;\n\t\t\t} else {\n\t\t\t\treturn '#f4e8c1';\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\tconst handleError = () => {\n\t\tsetErrorThrown(true);\n\t\tsetWeatherData(null);\n\t\tsetBackgroundUrl(null);\n\t};\n\n\tconst getWeatherData = async (location) => {\n\t\tsetIsLoading(true);\n\t\ttry {\n\t\t\tconst url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${apiKey}`;\n\t\t\tconst response = await fetch(url, { mode: 'cors' });\n\t\t\tif (response.ok) {\n\t\t\t\tconst data = await response.json();\n\t\t\t\tsetWeatherData(data);\n\t\t\t\tconst bg = await getBackgroundImage(data.weather[0].main);\n\t\t\t\tsetBackgroundUrl(bg);\n\t\t\t} else {\n\t\t\t\thandleError();\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthrow new Error(err);\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tconst background = document.getElementById('root');\n\t\tbackground.style.backgroundImage = `url(${backgroundUrl})`;\n\t}, [backgroundUrl]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Form getWeatherData={getWeatherData} apiKey={apiKey} />\n\t\t\t{errorThrown && !weatherData ? <ErrorMessage /> : null}\n\t\t\t{isLoading ? <LoadingScreen /> : null}\n\t\t\t{weatherData && !isLoading ? (\n\t\t\t\t<WeatherCard data={weatherData} />\n\t\t\t) : null}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}